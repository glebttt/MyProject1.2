Index: src/main/java/code/algorithms/ModelRunner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package code.algorithms;\n\nimport code.model.objects.PlanetObject;\nimport code.model.objects.Probe;\nimport code.utils.HelperFunctions;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ModelRunner {\n    /**\n     * Runs the model forward with step updates the position of the Objects in the Model using Euler Solver\n     * <p>\n     * The runner is made to work with multiple probes also it is optimized to work fast with Euler solver\n     * Boosts are checked inside as well, because the max F depends on the step size\n     * </p>\n     *\n     * @param numberOfDays how many days is the model going to get run for\n     * @param accuracy     or step size for the Solver\n     * @param planetss     list of planets that are going to be run\n     * @param probes       list of probes that are going to be run\n     */\n    public static void runnerForMultipleProbes(int numberOfDays, double accuracy, List<PlanetObject> planetss, List<Probe> probes) {\n        ArrayList<PlanetObject> allObjects = new ArrayList<>(planetss);\n        allObjects.addAll(probes);\n        PlanetObject[] planets = allObjects.toArray(new PlanetObject[allObjects.size()]);\n        boolean stopper = false;\n        // check if the boosts\n        for (Probe probe : probes) {\n            boolean checker = probe.areBoostsValid(accuracy);\n            System.out.println(checker);\n            if (!checker) {\n                stopper = true;\n                System.out.println(\"The probe \" + probe.getProbeNumber() + \" with wrong boost\");\n            }\n        }\n\n        if (!stopper) {\n            for (int i = 0; i < (1 / accuracy) * 60 * 60 * 24 * numberOfDays; i += 1) {\n\n                if (i % ((1 / accuracy) * 60 * 60 * 24) == 0) {\n                    double day = i / ((1 / accuracy) * 60 * 60 * 24);\n                    System.out.println(\"Day \" + day);\n                    for (Probe probe : probes) {\n                        probe.BoosterMECH(day);\n                    }\n                }\n                for (int j = 1; j < planets.length; j++) {\n\n                    double[] acc = new double[3];\n                    for (int k = 0; k < planets.length - probes.size(); k++) {\n\n                        if (k != j) {\n                            acc = HelperFunctions.addition(acc, planets[j].accelerationBetween(planets[k]));\n                        }\n                    }\n                    Solvers.implicitEuler(planets[j], acc, accuracy);\n                }\n            }\n        }\n    }\n\n    /**\n     * Runs the model forward with step updates the position of the Objects in the Model using Euler Solver\n     * This runner is used for GUI and is called in a loop, so it runs the model not for days but seconds usually\n     * small values. It keeps track of how long the model has been run.\n     * <p>\n     * The runner is made to work with multiple probes also it is optimized to work fast with Euler solver\n     * Boosts are checked inside as well, because the max F depends on the step size\n     * </p>\n     *\n     * @param time       keep track how long the model has been run in total\n     * @param smoothness how smooth the planets are going to move in GUI\n     * @param accuracy   or step size for the Solver\n     * @param planetsList   list of planets that are going to be run\n     * @param probes     list of probes that are going to be run\n     * @return the amount of times runs and will update the amount of time the model was run for\n     */\n    public static double runnerForGUI(double time, int smoothness, double accuracy, List<PlanetObject> planetsList, List<Probe> probes) {\n        ArrayList<PlanetObject> allObjects = new ArrayList<>(planetsList);\n        allObjects.addAll(probes);\n        PlanetObject[] planets = allObjects.toArray(new PlanetObject[allObjects.size()]);\n        boolean stopper = false;\n        // check if the boosts\n        for (Probe probe : probes) {\n            boolean checker = probe.areBoostsValid(accuracy);\n            if (!checker) {\n                stopper = true;\n                System.out.println(\"The probe \" + probe.getProbeNumber() + \" with wrong boost\");\n            }\n        }\n\n        if (!stopper) {\n            for (int i = 0; i < smoothness; i += 1) {\n\n                for (int j = 1; j < planets.length; j++) {\n                    if (i % ((1 / accuracy) * 60 * 60 * 24) == 0) {\n\n                        double day = time / ((1 / accuracy) * 60 * 60 * 24);\n                        for (Probe probe : probes) {\n                            probe.BoosterMECH(day);\n                        }\n                    }\n                    double[] acc = new double[3];\n                    for (int k = 0; k < planets.length; k++) {\n                        if (k != j) {\n                            acc = HelperFunctions.addition(acc, planets[j].accelerationBetween(planets[k]));\n                        }\n                    }\n                    Solvers.implicitEuler(planets[j], acc, accuracy);\n                }\n                time++;\n            }\n        }\n        return time;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/code/algorithms/ModelRunner.java b/src/main/java/code/algorithms/ModelRunner.java
--- a/src/main/java/code/algorithms/ModelRunner.java	
+++ b/src/main/java/code/algorithms/ModelRunner.java	
@@ -28,7 +28,7 @@
         // check if the boosts
         for (Probe probe : probes) {
             boolean checker = probe.areBoostsValid(accuracy);
-            System.out.println(checker);
+            //System.out.println(checker);
             if (!checker) {
                 stopper = true;
                 System.out.println("The probe " + probe.getProbeNumber() + " with wrong boost");
@@ -40,7 +40,53 @@
 
                 if (i % ((1 / accuracy) * 60 * 60 * 24) == 0) {
                     double day = i / ((1 / accuracy) * 60 * 60 * 24);
-                    System.out.println("Day " + day);
+                    if(day % 33 == 0){
+                        System.out.print("Day " + day + " ");
+                    }
+
+                    for (Probe probe : probes) {
+                        probe.BoosterMECH(day);
+                    }
+                }
+                for (int j = 1; j < planets.length; j++) {
+
+                    double[] acc = new double[3];
+                    for (int k = 0; k < planets.length - probes.size(); k++) {
+
+                        if (k != j) {
+                            acc = HelperFunctions.addition(acc, planets[j].accelerationBetween(planets[k]));
+                        }
+                    }
+                    Solvers.implicitEuler(planets[j], acc, accuracy);
+                }
+            }
+        }
+    }
+
+    public static void runnerForMultipleProbesChanged(int numberOfDays, double accuracy, List<PlanetObject> planetss, List<Probe> probes) {
+        ArrayList<PlanetObject> allObjects = new ArrayList<>(planetss);
+        allObjects.addAll(probes);
+        PlanetObject[] planets = allObjects.toArray(new PlanetObject[allObjects.size()]);
+        boolean stopper = false;
+        // check if the boosts
+        for (Probe probe : probes) {
+            boolean checker = probe.areBoostsValid(accuracy);
+            //System.out.println(checker);
+            if (!checker) {
+                stopper = true;
+                System.out.println("The probe " + probe.getProbeNumber() + " with wrong boost");
+            }
+        }
+
+        if (!stopper) {
+            for (int i = 0; i < numberOfDays / accuracy; i += 1) {
+
+                if (i % ((1 / accuracy) * 60 * 60 * 24) == 0) {
+                    double day = i / ((1 / accuracy) * 60 * 60 * 24);
+                    if(day % 33 == 0){
+                        System.out.println("Day " + day);
+                    }
+
                     for (Probe probe : probes) {
                         probe.BoosterMECH(day);
                     }
Index: src/main/java/code/model/objects/Probe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package code.model.objects;\n\nimport code.model.Model;\nimport code.utils.HelperFunctions;\n\nimport java.util.*;\n\n/**\n * Class representing a spacecraft in the model. Extends the PlanetObject class.\n */\npublic class Probe extends PlanetObject {\n    private double shortestDistanceToTitan;\n    private final int PROBE_NUMBER;\n    private static int probeCounter = 0;\n    private final Queue<Boost> listOfBoosts;\n    private double fuelUsed;\n    private double[] coordinatesOfShortestDistanceToTitan;\n\n\n    public Probe() {\n        super(new double[3], new double[]{0, 0, 0});\n        PROBE_NUMBER = probeCounter;\n        probeCounter++;\n        listOfBoosts = new PriorityQueue<>();\n        setCoordinates(initialPosition());\n        setMass(50_000);\n        shortestDistanceToTitan = getDistanceToTitan();\n        coordinatesOfShortestDistanceToTitan = new double[3];\n    }\n\n\n    /**\n     * Overrides the PlanetObject class's method. Apart from assigning the new coordinates\n     * also checks the Probe's distance to Titan. If this distance is the lowest noted distance,\n     * assigns it to the shortestDistanceToTitan field.\n     *\n     * @param coordinates an array of doubles representing the new coordinates for the modeled object.\n     */\n    @Override\n    public void setCoordinates(double[] coordinates) {\n        super.setCoordinates(coordinates);\n        double distanceToTitan = getDistanceToTitan();\n        if (distanceToTitan < shortestDistanceToTitan) {\n            shortestDistanceToTitan = distanceToTitan;\n            coordinatesOfShortestDistanceToTitan = coordinates;\n        }\n    }\n\n    public double[] getCoordinatesOfShortestDistanceToTitan() {\n        return coordinatesOfShortestDistanceToTitan;\n    }\n\n    private double[] initialPosition() {\n        double[] coordinates = HelperFunctions.subtract(Model.getPlanetObjects().get(\"Earth\").getCoordinates(),\n                Model.getPlanetObjects().get(\"Titan\").getCoordinates());\n\n        double magnitude = HelperFunctions.getVectorMagnitude(coordinates);\n        for (int i = 0; i <= 2; i++)\n            coordinates[i] = coordinates[i] * 6370 / magnitude;\n\n        return HelperFunctions.addition(coordinates, Model.getPlanetObjects().get(\"Earth\").getCoordinates());\n    }\n\n    public double getDistanceToTitan() {\n        return HelperFunctions.getDistanceBetween(this, Model.getPlanetObjects().get(\"Titan\"));\n    }\n\n    public double getDistanceToEarth() {\n        return HelperFunctions.getDistanceBetween(this, Model.getPlanetObjects().get(\"Earth\"));\n    }\n\n    public double getShortestDistanceToTitan() {\n        return shortestDistanceToTitan;\n    }\n\n    public boolean areBoostsValid(double step) {\n        double maxImpulse = 3 * (Math.pow(10, 7)) * step;\n        ArrayList<Boost> list = new ArrayList<>(listOfBoosts);\n        for (Boost boost : list) {\n            if (boost.getFuel() > maxImpulse) {\n                System.out.println(\"Max is\" + maxImpulse);\n                System.out.println(\"Boots is\" + boost.getFuel());\n                return false;\n            }\n        }\n        return true;\n\n    }\n\n\n    public void addBoost(Boost boost) {\n        listOfBoosts.add(boost);\n        fuelUsed += boost.getFuel();\n    }\n\n    public void BoosterMECH(double time) {\n        if (listOfBoosts.peek() != null) {\n            if (time == listOfBoosts.peek().getTimeOfBoost()) {\n                System.out.println(\"boosted\");\n                double[] probeVelocity = getVelocity();\n                double[] boostVelocity = listOfBoosts.poll().getVelocityOfBoost();\n                setVelocity(HelperFunctions.addition(probeVelocity, boostVelocity));\n            }\n        }\n    }\n\n    public int getProbeNumber() {\n        return PROBE_NUMBER;\n    }\n\n    public double getFuelUsed() {\n        return fuelUsed;\n    }\n\n    @Override\n    public String toString() {\n        return \"Probe{\" +\n                \"shortestDistanceToTitan=\" + shortestDistanceToTitan +\n                \", listOfBoosts=\" + listOfBoosts +\n                \", fuelUsed=\" + fuelUsed +\n                '}';\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/code/model/objects/Probe.java b/src/main/java/code/model/objects/Probe.java
--- a/src/main/java/code/model/objects/Probe.java	
+++ b/src/main/java/code/model/objects/Probe.java	
@@ -96,7 +96,7 @@
     public void BoosterMECH(double time) {
         if (listOfBoosts.peek() != null) {
             if (time == listOfBoosts.peek().getTimeOfBoost()) {
-                System.out.println("boosted");
+                //System.out.println("boosted");
                 double[] probeVelocity = getVelocity();
                 double[] boostVelocity = listOfBoosts.poll().getVelocityOfBoost();
                 setVelocity(HelperFunctions.addition(probeVelocity, boostVelocity));
Index: src/main/java/code/algorithms/LaunchRocketFromTitan.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package code.algorithms;\n\nimport code.model.Model;\nimport code.model.data.loaders.FileDataLoader;\nimport code.model.objects.Boost;\nimport code.model.objects.Probe;\nimport code.utils.HelperFunctions;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\nimport static code.algorithms.ModelRunner.runnerForMultipleProbes;\nimport static code.model.Model.addProbe;\n\npublic class LaunchRocketFromTitan {\n\n    private final int INITIAL = 0;\n    private final int XPLUS = 1;\n    private final int XMINUS = 2;\n    private final int YPLUS = 3;\n    private final int YMINUS = 4;\n    private final int ZPLUS = 5;\n    private final int ZMINUS = 6;\n    private final int X = 0;\n    private final int Y = 1;\n    private final int Z = 2;\n    private double[] bestProbeCoordinates;\n    \n    public LaunchRocketFromTitan(double[] bestCoordinates){\n        this.bestProbeCoordinates = bestCoordinates;\n    }\n    public Probe rocket;\n    public Probe passRocket(){\n        return rocket;\n    }\n\n    public double[] launchSevenRocketsReturn(double[][] velocitiesOfRockets, double accuracySolvers) {\n        System.out.println(\"Running...\");\n\n//        double[] bestCoordinates = bestProbeCoordinates; //coordinates of best rocket\n\n        Probe initialRocket = new Probe();\n        initialRocket.setCoordinates(bestProbeCoordinates);\n        Boost boost1 = new Boost(0,velocitiesOfRockets[INITIAL]);\n        initialRocket.addBoost(boost1);\n\n        Probe xPlusRocket = new Probe();\n        xPlusRocket.setCoordinates(bestProbeCoordinates);\n        Boost boost2 = new Boost(0,velocitiesOfRockets[XPLUS]);\n        xPlusRocket.addBoost(boost2);\n\n        Probe xMinusRocket = new Probe();\n        xMinusRocket.setCoordinates(bestProbeCoordinates);\n        Boost boost3 = new Boost(0,velocitiesOfRockets[XMINUS]);\n        xMinusRocket.addBoost(boost3);\n\n        Probe yPlusRocket = new Probe();\n        yPlusRocket.setCoordinates(bestProbeCoordinates);\n        Boost boost4 = new Boost(0,velocitiesOfRockets[YPLUS]);\n        yPlusRocket.addBoost(boost4);\n\n        Probe yMinusRocket = new Probe();\n        yMinusRocket.setCoordinates(bestProbeCoordinates);\n        Boost boost5 = new Boost(0,velocitiesOfRockets[YMINUS]);\n        yMinusRocket.addBoost(boost5);\n\n        Probe zPlusRocket = new Probe();\n        zPlusRocket.setCoordinates(bestProbeCoordinates);\n        Boost boost6 = new Boost(0,velocitiesOfRockets[ZPLUS]);\n        zPlusRocket.addBoost(boost6);\n\n        Probe zMinusRocket = new Probe();\n        zMinusRocket.setCoordinates(bestProbeCoordinates);\n        Boost boost7 = new Boost(0,velocitiesOfRockets[ZMINUS]);\n        zMinusRocket.addBoost(boost7);\n\n\n        Model.addProbe(initialRocket);\n        Model.addProbe(xPlusRocket);\n        Model.addProbe(xMinusRocket);\n        Model.addProbe(yPlusRocket);\n        Model.addProbe(yMinusRocket);\n        Model.addProbe(zPlusRocket);\n        Model.addProbe(zMinusRocket);\n\n        System.out.println(\"Initial position of earth: \" + Model.getPlanetObjects().get(\"Earth\").getCoordinates()[0]);\n        runnerForMultipleProbes(365, accuracySolvers, Model.getPlanetObjectsArrayList(), Model.getProbes());\n        System.out.println(\"\");\n        System.out.println(\"Distances from Earth: \" + initialRocket.getDistanceToEarth() + \"   \" +\n                xPlusRocket.getDistanceToEarth() + \"   \" +\n                xMinusRocket.getDistanceToEarth() + \"   \" +\n                yPlusRocket.getDistanceToEarth() + \"   \" +\n                yMinusRocket.getDistanceToEarth() + \"   \" +\n                zPlusRocket.getDistanceToEarth() + \"   \" +\n                zMinusRocket.getDistanceToEarth());\n\n        System.out.println(\"-------------------------------------------------------------------------------------------------------------\");\n        this.rocket = initialRocket;\n        return new double[]{\n                initialRocket.getDistanceToEarth(),\n                xPlusRocket.getDistanceToEarth(),\n                xMinusRocket.getDistanceToEarth(),\n                yPlusRocket.getDistanceToEarth(),\n                yMinusRocket.getDistanceToEarth(),\n                zPlusRocket.getDistanceToEarth(),\n                zMinusRocket.getDistanceToEarth()\n        };\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/code/algorithms/LaunchRocketFromTitan.java b/src/main/java/code/algorithms/LaunchRocketFromTitan.java
--- a/src/main/java/code/algorithms/LaunchRocketFromTitan.java	
+++ b/src/main/java/code/algorithms/LaunchRocketFromTitan.java	
@@ -25,7 +25,7 @@
     private final int Y = 1;
     private final int Z = 2;
     private double[] bestProbeCoordinates;
-    
+
     public LaunchRocketFromTitan(double[] bestCoordinates){
         this.bestProbeCoordinates = bestCoordinates;
     }
@@ -107,4 +107,4 @@
         };
     }
 
-}
+}
\ No newline at end of file
Index: src/main/java/code/algorithms/LaunchRocketHC.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package code.algorithms;\n\nimport code.model.Model;\nimport code.model.data.loaders.FileDataLoader;\nimport code.model.objects.Boost;\nimport code.model.objects.Probe;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\nimport static code.algorithms.ModelRunner.runnerForMultipleProbes;\nimport static code.model.Model.addProbe;\n\npublic class LaunchRocketHC {\n\n    private final int INITIAL = 0;\n    private final int XPLUS = 1;\n    private final int XMINUS = 2;\n    private final int YPLUS = 3;\n    private final int YMINUS = 4;\n    private final int ZPLUS = 5;\n    private final int ZMINUS = 6;\n    private final int X = 0;\n    private final int Y = 1;\n    private final int Z = 2;\n    private static double[] closestCoordinates;\n    public LaunchRocketHC() {\n        //this one is called in HillClimbingAlg\n    }\n\n    public double[] launchSevenRockets(double[][] velocitiesOfRockets, double accuracySolvers) {\n\n        System.out.println(\"Running...\");\n\n        Model.getInstance().loadData(new FileDataLoader());\n\n        Probe initialRocket = new Probe();\n        Boost boost1 = new Boost(0, velocitiesOfRockets[INITIAL]);\n        initialRocket.addBoost(boost1);\n\n        Probe xPlusRocket = new Probe();\n        Boost boost2 = new Boost(0, velocitiesOfRockets[XPLUS]);\n        xPlusRocket.addBoost(boost2);\n\n        Probe xMinusRocket = new Probe();\n        Boost boost3 = new Boost(0, velocitiesOfRockets[XMINUS]);\n        xMinusRocket.addBoost(boost3);\n\n        Probe yPlusRocket = new Probe();\n        Boost boost4= new Boost(0, velocitiesOfRockets[YPLUS]);\n        yPlusRocket.addBoost(boost4);\n\n        Probe yMinusRocket = new Probe();\n        Boost boost5= new Boost(0, velocitiesOfRockets[YMINUS]);\n        yMinusRocket.addBoost(boost5);\n\n        Probe zPlusRocket = new Probe();\n        Boost boost6= new Boost(0, velocitiesOfRockets[ZPLUS]);\n        zPlusRocket.addBoost(boost6);\n\n        Probe zMinusRocket = new Probe();\n        Boost boost7= new Boost(0, velocitiesOfRockets[ZMINUS]);\n        zMinusRocket.addBoost(boost7);\n\n        Model.addProbe(initialRocket);\n        Model.addProbe(xPlusRocket);\n        Model.addProbe(xMinusRocket);\n        Model.addProbe(yPlusRocket);\n        Model.addProbe(yMinusRocket);\n        Model.addProbe(zPlusRocket);\n        Model.addProbe(zMinusRocket);\n\n        runnerForMultipleProbes(365, accuracySolvers, Model.getPlanetObjectsArrayList(), Model.getProbes());\n        if(initialRocket.getDistanceToTitan() > initialRocket.getShortestDistanceToTitan()){\n            closestCoordinates = initialRocket.getCoordinatesOfShortestDistanceToTitan();\n        }\n        System.out.println();\n        System.out.println(\"Distances to Titan: \"+ initialRocket.getShortestDistanceToTitan()+\"   \" +\n                xPlusRocket.getShortestDistanceToTitan()+ \"   \" +\n                xMinusRocket.getShortestDistanceToTitan()+\"   \" +\n                yPlusRocket.getShortestDistanceToTitan()+\"   \" +\n                yMinusRocket.getShortestDistanceToTitan()+\"   \" +\n                zPlusRocket.getShortestDistanceToTitan()+\"   \" +\n                zMinusRocket.getShortestDistanceToTitan());\n\n        System.out.println(\"-------------------------------------------------------------------------------------------------------------\");\n\n        return new double[]{initialRocket.getShortestDistanceToTitan(),\n                xPlusRocket.getShortestDistanceToTitan(),\n                xMinusRocket.getShortestDistanceToTitan(),\n                yPlusRocket.getShortestDistanceToTitan(),\n                yMinusRocket.getShortestDistanceToTitan(),\n                zPlusRocket.getShortestDistanceToTitan(),\n                zMinusRocket.getShortestDistanceToTitan()};\n    }\n\n    public  double[] getClosestCoordinates() {\n        return closestCoordinates;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/code/algorithms/LaunchRocketHC.java b/src/main/java/code/algorithms/LaunchRocketHC.java
--- a/src/main/java/code/algorithms/LaunchRocketHC.java	
+++ b/src/main/java/code/algorithms/LaunchRocketHC.java	
@@ -9,6 +9,7 @@
 import java.util.Arrays;
 
 import static code.algorithms.ModelRunner.runnerForMultipleProbes;
+import static code.algorithms.ModelRunner.runnerForMultipleProbesChanged;
 import static code.model.Model.addProbe;
 
 public class LaunchRocketHC {
@@ -70,7 +71,7 @@
         Model.addProbe(zPlusRocket);
         Model.addProbe(zMinusRocket);
 
-        runnerForMultipleProbes(365, accuracySolvers, Model.getPlanetObjectsArrayList(), Model.getProbes());
+        runnerForMultipleProbesChanged(21106591, accuracySolvers, Model.getPlanetObjectsArrayList(), Model.getProbes());
         if(initialRocket.getDistanceToTitan() > initialRocket.getShortestDistanceToTitan()){
             closestCoordinates = initialRocket.getCoordinatesOfShortestDistanceToTitan();
         }
Index: src/main/java/code/algorithms/HillClimbingAlgReturn.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package code.algorithms;\n\nimport java.util.Arrays;\nimport java.util.Random;\nimport code.algorithms.LaunchRocketFromTitan;\n\n\npublic class HillClimbingAlgReturn {\n\n    private final int INITIAL = 0;\n    private final int XPLUS = 1;\n    private final int XMINUS = 2;\n    private final int YPLUS = 3;\n    private final int YMINUS = 4;\n    private final int ZPLUS = 5;\n    private final int ZMINUS = 6;\n    private final int X = 0;\n    private final int Y = 1;\n    private final int Z = 2;\n    private double[] bestCoordinates;\n\n    public HillClimbingAlgReturn(double[] bestCoordinates) {\n        this.bestCoordinates = bestCoordinates;\n    }\n\n    public double[] runHillClimbingAlg(double VelocityChange, double accuracySolver, double initialX, double initialY, double initialZ) {\n\n        System.out.println(\"Starting HC from Titan\");\n\n        Random rn = new Random();\n\n        int closestRocket = 0;\n\n        int genCounter = 1;\n\n        double[][] velocitiesOfRockets = new double[7][3];\n\n        velocitiesOfRockets[INITIAL][X] = initialX;\n        velocitiesOfRockets[INITIAL][Y] = initialY;\n        velocitiesOfRockets[INITIAL][Z] = initialZ;\n\n        while (true) {\n\n            for (int i = 1; i < velocitiesOfRockets.length; i++) {\n                velocitiesOfRockets[i][X] = velocitiesOfRockets[INITIAL][X];\n                velocitiesOfRockets[i][Y] = velocitiesOfRockets[INITIAL][Y];\n                velocitiesOfRockets[i][Z] = velocitiesOfRockets[INITIAL][Z];\n            }\n            velocitiesOfRockets[XPLUS][X] = velocitiesOfRockets[INITIAL][X] + VelocityChange;\n            velocitiesOfRockets[XMINUS][X] = velocitiesOfRockets[INITIAL][X] - VelocityChange;\n            velocitiesOfRockets[YPLUS][Y] = velocitiesOfRockets[INITIAL][Y] + VelocityChange;\n            velocitiesOfRockets[YMINUS][Y] = velocitiesOfRockets[INITIAL][Y] - VelocityChange;\n            velocitiesOfRockets[ZPLUS][Z] = velocitiesOfRockets[INITIAL][Z] + VelocityChange;\n            velocitiesOfRockets[ZMINUS][Z] = velocitiesOfRockets[INITIAL][Z] - VelocityChange;\n\n            System.out.println(\"Current best velocities: \" + Arrays.deepToString(velocitiesOfRockets));\n\n            LaunchRocketFromTitan launchRocketFromTitan = new LaunchRocketFromTitan(bestCoordinates);\n            double[] DistancesToEarth = launchRocketFromTitan.launchSevenRocketsReturn(velocitiesOfRockets, accuracySolver);\n\n            closestRocket = findSmallest(DistancesToEarth);\n            System.out.println(\"Current generation number: \" + genCounter);\n            System.out.println(\"Closest rocket: \" + closestRocket);\n\n            switch (closestRocket) {\n                case INITIAL:\n                    return new double[]{velocitiesOfRockets[INITIAL][X], velocitiesOfRockets[INITIAL][Y], velocitiesOfRockets[INITIAL][Z]};\n                case XPLUS:\n                    velocitiesOfRockets[INITIAL][X] = velocitiesOfRockets[XPLUS][X];\n                    velocitiesOfRockets[INITIAL][Y] = velocitiesOfRockets[XPLUS][Y];\n                    velocitiesOfRockets[INITIAL][Z] = velocitiesOfRockets[XPLUS][Z];\n                    break;\n                case XMINUS:\n                    velocitiesOfRockets[INITIAL][X] = velocitiesOfRockets[XMINUS][X];\n                    velocitiesOfRockets[INITIAL][Y] = velocitiesOfRockets[XMINUS][Y];\n                    velocitiesOfRockets[INITIAL][Z] = velocitiesOfRockets[XMINUS][Z];\n                    break;\n                case YPLUS:\n                    velocitiesOfRockets[INITIAL][X] = velocitiesOfRockets[YPLUS][X];\n                    velocitiesOfRockets[INITIAL][Y] = velocitiesOfRockets[YPLUS][Y];\n                    velocitiesOfRockets[INITIAL][Z] = velocitiesOfRockets[YPLUS][Z];\n                    break;\n                case YMINUS:\n                    velocitiesOfRockets[INITIAL][X] = velocitiesOfRockets[YMINUS][X];\n                    velocitiesOfRockets[INITIAL][Y] = velocitiesOfRockets[YMINUS][Y];\n                    velocitiesOfRockets[INITIAL][Z] = velocitiesOfRockets[YMINUS][Z];\n                    break;\n                case ZPLUS:\n                    velocitiesOfRockets[INITIAL][X] = velocitiesOfRockets[ZPLUS][X];\n                    velocitiesOfRockets[INITIAL][Y] = velocitiesOfRockets[ZPLUS][Y];\n                    velocitiesOfRockets[INITIAL][Z] = velocitiesOfRockets[ZPLUS][Z];\n                    break;\n                case ZMINUS:\n                    velocitiesOfRockets[INITIAL][X] = velocitiesOfRockets[ZMINUS][X];\n                    velocitiesOfRockets[INITIAL][Y] = velocitiesOfRockets[ZMINUS][Y];\n                    velocitiesOfRockets[INITIAL][Z] = velocitiesOfRockets[ZMINUS][Z];\n                    break;\n            }\n            genCounter++;\n        }\n    }\n\n    public static int findSmallest(double[] distances) { //actual findSmallest\n        int smallestIndex = 0;\n        for (int i = 1; i < distances.length; i++) {\n            if (distances[i] < distances[smallestIndex])\n                smallestIndex = i;\n        }\n        return smallestIndex;\n    }\n\n    public static void main(String[] args) {\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/code/algorithms/HillClimbingAlgReturn.java b/src/main/java/code/algorithms/HillClimbingAlgReturn.java
--- a/src/main/java/code/algorithms/HillClimbingAlgReturn.java	
+++ b/src/main/java/code/algorithms/HillClimbingAlgReturn.java	
@@ -2,7 +2,6 @@
 
 import java.util.Arrays;
 import java.util.Random;
-import code.algorithms.LaunchRocketFromTitan;
 
 
 public class HillClimbingAlgReturn {
@@ -112,4 +111,4 @@
     public static void main(String[] args) {
 
     }
-}
+}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"befef468-85dd-4357-a019-7cd94d9197bf\" name=\"Changes\" comment=\"Merge StamaMathjis into Main\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/code/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/code/Main.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/code/ProbeLauncher.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/code/ProbeLauncher.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Interface\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"boosterImplementation\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2NHEToQGlRKTbWGVth802s3yKhD\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;Merging main&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/marcell/Documents/*School/Year 1/Semester 2/Project 1-2/Phase 2/Project1.2-Rocket-to-Titan&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$\" />\n      <recent name=\"$PROJECT_DIR$/src/main/resources\" />\n      <recent name=\"$PROJECT_DIR$/src/main/java\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/test/java\" />\n      <recent name=\"$PROJECT_DIR$/src/main/resources/model\" />\n    </key>\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\n      <recent name=\"group1.project12group1\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"code.Main\" />\n      <module name=\"Project1-2-Group-1\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"code.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"HelperFunctionsTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Project1-2-Group-1\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"HelperFunctionsTest\" />\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"PlanetObjectTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Project1-2-Group-1\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"PlanetObjectTest\" />\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\n      <module name=\"Project1.2 Group 1\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\n      <module name=\"Project1.2 Group 1\" />\n      <option name=\"filePath\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <list>\n      <item itemvalue=\"Application.Main\" />\n      <item itemvalue=\"JUnit.HelperFunctionsTest\" />\n      <item itemvalue=\"JUnit.PlanetObjectTest\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n        <item itemvalue=\"JUnit.PlanetObjectTest\" />\n        <item itemvalue=\"JUnit.HelperFunctionsTest\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"13cb742e-4cc8-4686-864c-bc5cb4fb0b5a\" name=\"Changes\" comment=\"\" />\n      <created>1679312618137</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1679312618137</updated>\n      <workItem from=\"1679312619245\" duration=\"1000\" />\n      <workItem from=\"1679356589531\" duration=\"4766000\" />\n      <workItem from=\"1679636818916\" duration=\"2665000\" />\n      <workItem from=\"1679649470844\" duration=\"787000\" />\n      <workItem from=\"1682574830037\" duration=\"138000\" />\n      <workItem from=\"1682575019746\" duration=\"212000\" />\n      <workItem from=\"1682575286272\" duration=\"169000\" />\n      <workItem from=\"1682575476442\" duration=\"191000\" />\n      <workItem from=\"1682575733021\" duration=\"369000\" />\n      <workItem from=\"1682576135260\" duration=\"55000\" />\n      <workItem from=\"1683509128969\" duration=\"1000\" />\n      <workItem from=\"1683509165621\" duration=\"1000\" />\n      <workItem from=\"1683517925630\" duration=\"15000\" />\n      <workItem from=\"1683524116632\" duration=\"504000\" />\n      <workItem from=\"1683547172038\" duration=\"177000\" />\n      <workItem from=\"1683811476154\" duration=\"39000\" />\n      <workItem from=\"1683824125042\" duration=\"993000\" />\n      <workItem from=\"1683838171440\" duration=\"610000\" />\n      <workItem from=\"1683842326368\" duration=\"3117000\" />\n      <workItem from=\"1683907388180\" duration=\"1082000\" />\n      <workItem from=\"1683908486983\" duration=\"4539000\" />\n      <workItem from=\"1683954695733\" duration=\"1411000\" />\n      <workItem from=\"1683956122161\" duration=\"1278000\" />\n      <workItem from=\"1683957543331\" duration=\"65000\" />\n      <workItem from=\"1683957626120\" duration=\"767000\" />\n      <workItem from=\"1684149645676\" duration=\"5926000\" />\n      <workItem from=\"1684230444313\" duration=\"356000\" />\n      <workItem from=\"1684231111698\" duration=\"93000\" />\n      <workItem from=\"1684231446204\" duration=\"2195000\" />\n      <workItem from=\"1684254939940\" duration=\"209000\" />\n      <workItem from=\"1684255315975\" duration=\"1579000\" />\n      <workItem from=\"1684271461931\" duration=\"2763000\" />\n      <workItem from=\"1684286667400\" duration=\"9645000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"WORKING HOW THIS SHIT WORKS\">\n      <created>1679319564168</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679319564168</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Added some verson of working code\">\n      <created>1679322553538</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679322553538</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Added some impr\">\n      <created>1679341953937</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679341953937</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"changed the methods to work with momentkum\">\n      <created>1679420214209</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679420214209</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"bug fix\">\n      <created>1679482920572</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679482920572</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Added comments and cleaned the PlanetObject\">\n      <created>1679599809794</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679599809794</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Added comments and cleaned the PlanetObject\">\n      <created>1679600320463</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679600320463</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Added comments and cleaned the PlanetObject\">\n      <created>1679603739673</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679603739673</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"eeeeee\">\n      <created>1679608031109</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679608031109</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"eeeeee\">\n      <created>1679610941972</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679610941972</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"eeeeee\">\n      <created>1679611003457</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679611003457</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"eeeeee\">\n      <created>1679611384750</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679611384750</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"eeeeee\">\n      <created>1679611794976</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679611794976</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"eeeeee\">\n      <created>1679612189357</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679612189357</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"eeeeee\">\n      <created>1679649307609</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679649307609</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"eeeeee\">\n      <created>1679649317635</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1679649317635</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"base for graphics, general structure, will be updated\">\n      <created>1682575177410</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1682575177410</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"reading model from xlsx files and planet-spaceship classes used by the graphics (will be merged later)\">\n      <created>1682575388176</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1682575388176</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"resources\">\n      <created>1682575516061</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1682575516061</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"new new structure\">\n      <created>1683547337492</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1683547337492</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"Updated HillClimbingAlg\">\n      <created>1684838590072</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1684838590072</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\".\">\n      <created>1685445720091</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1685445720091</updated>\n    </task>\n    <task id=\"LOCAL-00023\" summary=\".\">\n      <created>1685456275348</created>\n      <option name=\"number\" value=\"00023\" />\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1685456275348</updated>\n    </task>\n    <task id=\"LOCAL-00024\" summary=\".\">\n      <created>1685459264730</created>\n      <option name=\"number\" value=\"00024\" />\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1685459264730</updated>\n    </task>\n    <task id=\"LOCAL-00025\" summary=\".\">\n      <created>1685475108082</created>\n      <option name=\"number\" value=\"00025\" />\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1685475108082</updated>\n    </task>\n    <task id=\"LOCAL-00026\" summary=\"Merge StamaMathjis into Main\">\n      <created>1685475132780</created>\n      <option name=\"number\" value=\"00026\" />\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1685475132780</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"27\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"added getAcceleration\" />\n    <MESSAGE value=\"WORKING HOW THIS SHIT WORKS\" />\n    <MESSAGE value=\"Added some verson of working code\" />\n    <MESSAGE value=\"Added some impr\" />\n    <MESSAGE value=\"changed the methods to work with momentum\" />\n    <MESSAGE value=\"changed the methods to work with momentkum\" />\n    <MESSAGE value=\"bug fix\" />\n    <MESSAGE value=\"Added comments and cleaned the PlanetObject\" />\n    <MESSAGE value=\"eeeeee\" />\n    <MESSAGE value=\"base for graphics, general structure, will be updated\" />\n    <MESSAGE value=\"reading model from xlsx files and planet-spaceship classes used by the graphics (will be merged later)\" />\n    <MESSAGE value=\"resources\" />\n    <MESSAGE value=\"new new structure\" />\n    <MESSAGE value=\"Updated HillClimbingAlg\" />\n    <MESSAGE value=\".\" />\n    <MESSAGE value=\"Merge StamaMathjis into Main\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Merge StamaMathjis into Main\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <pin-to-top-manager>\n      <pinned-members>\n        <PinnedItemInfo parentTag=\"code.model.objects.Probe\" memberName=\"COORDINATES\" />\n        <PinnedItemInfo parentTag=\"code.model.objects.PlanetObject\" memberName=\"COORDINATES\" />\n      </pinned-members>\n    </pin-to-top-manager>\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/Project1_2_Rocket_to_Titan$SolarSystem.ic\" NAME=\"SolarSystem Coverage Results\" MODIFIED=\"1679580725908\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\n      <FILTER>group1.project12group1.*</FILTER>\n    </SUITE>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -6,8 +6,12 @@
   <component name="ChangeListManager">
     <list default="true" id="befef468-85dd-4357-a019-7cd94d9197bf" name="Changes" comment="Merge StamaMathjis into Main">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/code/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/code/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/code/ProbeLauncher.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/code/ProbeLauncher.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/code/TrajectorySimulation.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/code/TrajectorySimulation.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/code/algorithms/HillClimbingAlgReturn.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/code/algorithms/HillClimbingAlgReturn.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/code/algorithms/LaunchRocketFromTitan.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/code/algorithms/LaunchRocketFromTitan.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/code/algorithms/LaunchRocketHC.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/code/algorithms/LaunchRocketHC.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/code/algorithms/ModelRunner.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/code/algorithms/ModelRunner.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/code/model/objects/Probe.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/code/model/objects/Probe.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -25,7 +29,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="boosterImplementation" />
+        <entry key="$PROJECT_DIR$" value="StamaMathijs" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -351,7 +355,14 @@
       <option name="project" value="LOCAL" />
       <updated>1685475132780</updated>
     </task>
-    <option name="localTasksCounter" value="27" />
+    <task id="LOCAL-00027" summary="Merge StamaMathjis into Main">
+      <created>1685477101726</created>
+      <option name="number" value="00027" />
+      <option name="presentableId" value="LOCAL-00027" />
+      <option name="project" value="LOCAL" />
+      <updated>1685477101726</updated>
+    </task>
+    <option name="localTasksCounter" value="28" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
Index: src/main/java/code/TrajectorySimulation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package code;\n\n\nimport code.algorithms.HillClimbingAlg;\nimport code.algorithms.HillClimbingAlgReturn;\nimport code.algorithms.LaunchRocketFromTitan;\nimport code.model.Model;\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n\n\npublic class Main {\n    public static void main(String[] args) {\n        HillClimbingAlg hcInstance = new HillClimbingAlg();\n        double[] bestVelocitiesToTitan = hcInstance.hillClimbing(1,1,159.78470381490106, -97.12752946315422, -8.151758278466753);\n        System.out.println(\"Best velocities to Titan: \");\n        System.out.println(\"xVelocity = \" + bestVelocitiesToTitan[0] + \"; yVelocity = \" + bestVelocitiesToTitan[1] + \"; zVelocity = \" + bestVelocitiesToTitan[2]);\n\n        HillClimbingAlgReturn hcReturnInstance = new HillClimbingAlgReturn(hcInstance.getCoordinatesToMain());\n        System.out.println(\"Switch to Return Trip\");\n\n        double[] bestVelocitiesToEarth = hcReturnInstance.runHillClimbingAlg(1, 1, 0, 0 ,0);\n        System.out.println(\"Best velocities to Earth: \");\n        System.out.println(\"xVelocity = \" + bestVelocitiesToEarth[0] + \"; yVelocity = \" + bestVelocitiesToEarth[1] + \"; zVelocity = \" + bestVelocitiesToEarth[2]);\n\n        System.out.println(\"Results: \");\n        System.out.println(\"Best velocities to Titan: \" + \"xVelocity = \" + bestVelocitiesToTitan[0] + \"; yVelocity = \" + bestVelocitiesToTitan[1] + \"; zVelocity = \" + bestVelocitiesToTitan[2]);\n        System.out.println(\"Best velocities to Earth: \" + \"xVelocity = \" + bestVelocitiesToEarth[0] + \"; yVelocity = \" + bestVelocitiesToEarth[1] + \"; zVelocity = \" + bestVelocitiesToEarth[2]);\n        //        Scanner scanner = new Scanner(System.in);\n//\n//        System.out.println(\"What simulation to run?\");\n//        System.out.println(\"1) From Earth to Titan\");\n//        System.out.println(\"2) From Titan to Earth\");\n//        System.out.println(\"Your choice: \");\n//        int choice = scanner.nextInt();\n//        if(choice == 1){\n//            System.out.println(Arrays.toString(HillClimbingAlg(0.000000001,100,-7.431984185099234, -38.47640576315323, -2.8374480784666383)));\n//        }else if (choice == 2) {\n//            System.out.println(Arrays.toString(HillClimbingAlgReturn.runHillClimbingAlg(0.000000001, 100, 0, 0, 0)));\n//        } else {\n//            System.out.println(\"Invalid choice.\");\n//        }\n\n\n        //Current best velocities: 78.00583413245792, -48.83110909866967, 5.512161606512603\n        // Model.getInstance().loadData(new FileDataLoader());\n//        Model.addProbe(new Probe(new double[]{68.7449, -44.1, -2.2176}));\n//\n//    Visualizer.main(args);\n//       ModelRunner.runnerForMultipleProbes(366, 1, new ArrayList<>(Model.getPlanetObjects().values()), Model.getProbes());\n    }\n}\n
===================================================================
diff --git a/src/main/java/code/TrajectorySimulation.java b/src/main/java/code/TrajectorySimulation.java
--- a/src/main/java/code/TrajectorySimulation.java	
+++ b/src/main/java/code/TrajectorySimulation.java	
@@ -1,54 +1,47 @@
 package code;
-
-
 import code.algorithms.HillClimbingAlg;
 import code.algorithms.HillClimbingAlgReturn;
-import code.algorithms.LaunchRocketFromTitan;
-import code.model.Model;
-
-import java.util.Arrays;
-import java.util.Scanner;
 
-
-
-public class Main {
+public class TrajectorySimulation {
     public static void main(String[] args) {
         HillClimbingAlg hcInstance = new HillClimbingAlg();
-        double[] bestVelocitiesToTitan = hcInstance.hillClimbing(1,1,159.78470381490106, -97.12752946315422, -8.151758278466753);
+        double[] bestVelocitiesToTitan = hcInstance.hillClimbing(1,10,67.73988800000001, -44.03988500000006, -4.258907);
         System.out.println("Best velocities to Titan: ");
         System.out.println("xVelocity = " + bestVelocitiesToTitan[0] + "; yVelocity = " + bestVelocitiesToTitan[1] + "; zVelocity = " + bestVelocitiesToTitan[2]);
 
         HillClimbingAlgReturn hcReturnInstance = new HillClimbingAlgReturn(hcInstance.getCoordinatesToMain());
+        System.out.println("-------------------------------------------------------------------------------------------------------------");
         System.out.println("Switch to Return Trip");
 
-        double[] bestVelocitiesToEarth = hcReturnInstance.runHillClimbingAlg(1, 1, 0, 0 ,0);
+        double[] bestVelocitiesToEarth = hcReturnInstance.runHillClimbingAlg(1, 10, bestVelocitiesToTitan[0], bestVelocitiesToTitan[1] ,bestVelocitiesToTitan[2]);
         System.out.println("Best velocities to Earth: ");
         System.out.println("xVelocity = " + bestVelocitiesToEarth[0] + "; yVelocity = " + bestVelocitiesToEarth[1] + "; zVelocity = " + bestVelocitiesToEarth[2]);
 
         System.out.println("Results: ");
         System.out.println("Best velocities to Titan: " + "xVelocity = " + bestVelocitiesToTitan[0] + "; yVelocity = " + bestVelocitiesToTitan[1] + "; zVelocity = " + bestVelocitiesToTitan[2]);
         System.out.println("Best velocities to Earth: " + "xVelocity = " + bestVelocitiesToEarth[0] + "; yVelocity = " + bestVelocitiesToEarth[1] + "; zVelocity = " + bestVelocitiesToEarth[2]);
-        //        Scanner scanner = new Scanner(System.in);
-//
-//        System.out.println("What simulation to run?");
-//        System.out.println("1) From Earth to Titan");
-//        System.out.println("2) From Titan to Earth");
-//        System.out.println("Your choice: ");
-//        int choice = scanner.nextInt();
-//        if(choice == 1){
-//            System.out.println(Arrays.toString(HillClimbingAlg(0.000000001,100,-7.431984185099234, -38.47640576315323, -2.8374480784666383)));
-//        }else if (choice == 2) {
-//            System.out.println(Arrays.toString(HillClimbingAlgReturn.runHillClimbingAlg(0.000000001, 100, 0, 0, 0)));
-//        } else {
-//            System.out.println("Invalid choice.");
-//        }
+
+    }
+}
 
 
-        //Current best velocities: 78.00583413245792, -48.83110909866967, 5.512161606512603
-        // Model.getInstance().loadData(new FileDataLoader());
-//        Model.addProbe(new Probe(new double[]{68.7449, -44.1, -2.2176}));
+//package code;
+//
+//import code.graphics.Visualizer;
+//import code.model.Model;
+//import code.model.data.loaders.FileDataLoader;
+//import code.model.objects.Probe;
+//
+//public class ProbeLauncher {
+//    public static void main(String[] args) {
+//        Model.getInstance().loadData(new FileDataLoader());
+//        Probe probe = new Probe();
+//        Probe.Boost boost = new Probe.Boost(0, new double[]{68.7449, -44.1, -2.2176});
+//        probe.addBoost(boost);
+//        Model.addProbe(probe);
+////        ModelRunner.runnerForMultipleProbes(365, 2, Model.getPlanetObjectsArrayList(), Model.getProbes());
+////        System.out.println(probe.getShortestDistanceToTitan());
 //
-//    Visualizer.main(args);
-//       ModelRunner.runnerForMultipleProbes(366, 1, new ArrayList<>(Model.getPlanetObjects().values()), Model.getProbes());
-    }
-}
+//        Visualizer.main(args);
+//    }
+//}
\ No newline at end of file
